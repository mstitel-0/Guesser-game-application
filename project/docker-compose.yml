services:

  user-database:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: user_db
    ports:
      - "32768:5432"
    networks:
      - "my-app-network"

  redis-cache:
    image: redis:latest
    ports:
      - "6379:6379"
    container_name: redis-cache
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - "my-app-network"

  mail-database:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: mail_db
    ports:
      - "32769:5432"
    networks:
      - "my-app-network"

  game-database:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: game_db
    ports:
      - "32770:5432"
    networks:
      - "my-app-network"

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - "my-app-network"

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    depends_on:
        - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - "my-app-network"

  auth-service:
    build:
      context: .
      dockerfile: ./authentication-service/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=user-database
      - DB_PORT=5432
      - DB_NAME=user_db
      - DB_USERNAME=admin
      - DB_PASSWORD=admin
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
      - SERVER_PORT=8080
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - user-database
    networks:
      - "my-app-network"

  mail-service:
    build:
      context: .
      dockerfile: ./mail-service/Dockerfile
    env_file:
      - .env
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=mail-database
      - DB_PORT=5432
      - DB_NAME=mail_db
      - DB_USERNAME=admin
      - DB_PASSWORD=admin
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
      - AUTH_SERVICE_HOST=http://localhost
      - AUTH_SERVICE_PORT=8085
      - SERVER_PORT=8081
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_AUTH=${MAIL_AUTH}
      - MAIL_STARTTLS=${MAIL_STARTTLS}
    depends_on:
      - mail-database
    networks:
      - "my-app-network"

  game-service:
    build:
      context: .
      dockerfile: ./game-service/Dockerfile
    env_file:
      - .env
    ports:
      - "8082:8082"
    environment:
      - DB_HOST=game-database
      - DB_PORT=5432
      - DB_NAME=game_db
      - DB_USERNAME=admin
      - DB_PASSWORD=admin
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - SERVER_PORT=8082
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - game-database
    networks:
      - "my-app-network"

  telegram-service:
    build:
      context: .
      dockerfile: ./telegram-service/Dockerfile
    env_file:
      - .env
    ports:
      - "8083:8083"
    environment:
      - SERVER_PORT=8083
    networks:
      - "my-app-network"

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    env_file:
      - .env
    ports:
      - "8085:8085"
    environment:
      - AUTH_SERVICE_HOST=http://auth-service
      - AUTH_SERVICE_PORT=8080
      - SERVER_PORT=8085
      - GAME_SERVICE_HOST=http://game-service
      - GAME_SERVICE_PORT=8082
      - TELEGRAM_SERVICE_HOST=http://telegram-service
      - TELEGRAM_SERVICE_PORT=8083
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - auth-service
    networks:
      - "my-app-network"

volumes:
  redis-data:

networks:
  my-app-network:
    driver: bridge